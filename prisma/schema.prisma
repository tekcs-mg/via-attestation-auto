// Fichier: prisma/schema.prisma

// Configuration du générateur client Prisma
generator client {
  provider = "prisma-client-js"
}

// Configuration de la source de données (notre base PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum pour définir les rôles utilisateurs de manière stricte
enum Role {
  USER
  ADMIN
}

enum FeuilletType {
  JAUNE
  ROUGE
  VERT
}

// --- NOUVEAU MODÈLE POUR LES AGENCES ---
model Agence {
  id      String  @id @default(cuid())
  code    String?  
  nom     String  @unique
  tel     String?
  email   String?
  adresse String?

  //champs pour la gestion des stocks
  stockFeuilletsJaunes Int @default(0)
  stockFeuilletsRouges Int @default(0)
  stockFeuilletsVerts  Int @default(0)

  // Relation : Une agence peut avoir plusieurs utilisateurs
  users   User[]
  attestations AttestationAuto[] // Relation: Une agence peut avoir plusieurs attestations
}

// --- MODÈLES POUR L'AUTHENTIFICATION (Next-Auth.js) ---

// Modèle pour les utilisateurs de l'application
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Le mot de passe est stocké hashé
  role          Role      @default(USER)
  isActive      Boolean   @default(true)

  // --- NOUVELLE RELATION ---
  // Un utilisateur peut être assigné à une agence (optionnel)
  agenceId      String?
  agence        Agence?   @relation(fields: [agenceId], references: [id])

  // Relation: Un utilisateur peut créer plusieurs attestations
  attestations  AttestationAuto[] @relation("CreatedBy")

  accounts      Account[]
  sessions      Session[]
}

// Modèle pour lier les comptes externes (ex: Google, Facebook), non utilisé ici mais requis par Next-Auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

// Modèle pour gérer les sessions de connexion des utilisateurs
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modèle pour les tokens de vérification (ex: pour la réinitialisation de mot de passe)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}


// --- MODÈLE MÉTIER PRINCIPAL ---

// Modèle pour nos attestations d'assurance automobile
model AttestationAuto {
  id              String    @id @default(cuid())
  numFeuillet     Int       @unique
  typeFeuillet    FeuilletType
  numeroPolice    String
  souscripteur    String
  adresse         String
  dateEffet       DateTime
  dateEcheance    DateTime
  usage           String
  marque          String
  nombrePlaces    Int
  immatriculation String
  dateEdition     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  creatorId       String
  creator         User      @relation("CreatedBy", fields: [creatorId], references: [id])
  // --- NOUVELLE RELATION REQUISE ---
  agenceId        String
  agence          Agence    @relation(fields: [agenceId], references: [id])
}
